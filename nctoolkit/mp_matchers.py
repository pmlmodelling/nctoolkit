from nctoolkit.matchpoint import open_matchpoint


def match_points(
    self,
    df=None,
    variables=None,
    depths=None,
    tmean=False,
    top=False,
    nan=None,
    regrid="bil",
    max_extrap=5,
    quiet = False,
    **kwargs,
):
    """
    match_points: Match dataset to a spatiotemporal points dataframe

    Parameters
    -------------
    df: pandas DataFrame
        The column names must be made up of a subset of "lon", "lat", "year", "month", "day" and "depth"
        Pressure (in dbars), named "pressure", can also be used instead of "depth", which will require the optional
        dependency seawater to be installed.
    variables:  str or list
        Str or list of variables. All variables are matched up if this is not supplied.
        This can include variables generated by assign using kwargs.
    depths:  nctoolkit DataSet or list
        If each cell has different vertical levels, this must be provided as a dataset.
        If each cell has the same vertical levels, provide it as a list.
        If this is not supplied nctoolkit will try to figure out what they are.
        Only required if carrying out vertical matchups.
    tmean:  bool
        Set to True or False, depending on whether you want temporal averaging at the temporal resolution given by df.
        For example, if you only had months in df, but had daily data in ds, you might want to calculate a daily average in the
        monthly dataset.
        This is equivalent to apply `ds.tmean(..)` to the dataset.
    top:    bool
        Set to True if you want only the top/surface level of the dataset to be selected for matching.
    nan: float or list
        Value or range of values to set to nan. Defaults to 0.
        Only required if values in dataset need changed to missing
    regrid: str
        Regridding method. Defaults to "bil". Options available are those in nctoolkit regrid method.
        "nn" for nearest neighbour.
    max_extrap: float
        Maximum distance for extrapolation. Defaults to 5.
    quiet: bool
        Set to True to suppress output
    kwargs: kwargs
        Additional arguments to send to assign


    Returns
    ---------------
    matchpoints : pandas.DataFrame

    """
    if max_extrap < 0:
        raise ValueError("max_extrap must not be negative")

    self.run()
    ds = self.copy()

    mp = open_matchpoint()

    df.columns = [x.lower() for x in df.columns]

    df = df.rename(columns={"longitude": "lon"})
    df = df.rename(columns={"latitude": "lat"})

    if len([x for x in df.columns if x in ["lon", "lat"]]) == 1:
        raise ValueError("You must provide both lon and lat")

    for x in df.columns:
        if x not in ["lon", "lat", "year", "month", "day", "depth", "pressure"]:
            raise ValueError(f"{x} is not a valid column name")

    if "depth" in df.columns and "pressure" in df.columns:
        raise ValueError("You cannot supply pressure and depth")

    if len([x for x in df.columns if x in ["lon", "lat"]]) < 2:
        raise ValueError("You must provide lon and lat!")

    for x in ["year", "month", "day"]:
        if x in df.columns:
            self.points_temporal = True

    mp.add_data(x=ds, depths=depths, variables=variables, top=top, nan=nan, quiet = quiet, **kwargs)
    mp.add_points(df, quiet = quiet)
    mp.matchup(tmean=tmean, regrid=regrid, max_extrap=max_extrap, quiet = quiet)
    return mp.values
